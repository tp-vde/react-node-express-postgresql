
services:
  db:
    image: postgres:17.0-bookworm
    container_name: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_ADMIN_PASSWORD: password
      POSTGRES_USER: postgres
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # networks:
    #   - pgnetwork

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    ports:
      - 8082:80
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    # networks:
    #   - pgnetwork
    depends_on:
      - db

  backend:
    env_file:
      - .env
    container_name: backend
    # build: ./packages/backend ou
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_NAME: postgres
    restart: always
    ports:
      - "5000:7007"
    depends_on:
      - db
    entrypoint: ["/app/entrypoint.sh"]

  # Service pour le frontend (React)
  app:
    # build: ./packages/app
    build:
      context: ./packages/app
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      REACT_APP_API_URL: http://localhost:7007
    ports:
      - "3001:3000"
    depends_on:
      - backend
    volumes:
      - ./packages/app/src:/app/src

# Volume pour persister les données de PostgreSQL et pour acceder à pgadmin4
volumes:
  postgres_data:
  pgadmin_data:

# Un réseau Docker personnalisé pour permettre la communication entre les services PostgreSQL et pgAdmin.
# networks:
#   pgnetwork: